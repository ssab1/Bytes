/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import conexion.ConexionBD;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sql.EntidadDeVenta;
import sql.EntidadProducto;
import sql.EntidadVenta;
import sql.ProductoSQL;
import sql.VentaSQL;

/**
 *
 * @author basti
 */
public class Ventana_venta extends javax.swing.JInternalFrame {

    String hora, minutos, segundos, ampm;
    Calendar calendario;
    Thread h1;
    ConexionBD conexion = new ConexionBD();
    ProductoSQL ps = new ProductoSQL();
    DefaultTableModel modelo = new DefaultTableModel();
    EntidadVenta ev = new EntidadVenta();
    EntidadDeVenta edv = new EntidadDeVenta();
    VentaSQL ventasql = new VentaSQL();
    EntidadProducto ep = new EntidadProducto();
    String codigobarra = null;
    int can = 1;
    int precio;
    String nombre = null;
    ArrayList lista = new ArrayList();
    String codigoaeliminar;

    /**
     * Creates new form Ventana_venta
     */
    public Ventana_venta() {
        initComponents();
        fecha();
        hora();
        pro_nombre.setEditable(false);
        pro_precio.setEditable(false);
        txtIvaVenta.setEditable(false);
        txtTotalVenta.setEditable(false);
    }

    void hora() {
        DateTimeFormatter formateador = DateTimeFormatter.ofPattern("HH:mm:ss"); // El formato es HH:mm:ss
        String horaActual = formateador.format(LocalDateTime.now());

        Runnable runnable = new Runnable() {
            @Override
            public void run() {
                while (true) {
                    try {
                        Thread.sleep(500);
                        etiquetaReloj.setText(formateador.format(LocalDateTime.now()));
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        };
        Thread hilo = new Thread(runnable);
        hilo.start();
    }

    //obtener fecha actual de la pc
    void fecha() {
        Calendar calendar = new GregorianCalendar();
        lblFecha.setText("" + calendar.get(calendar.YEAR) + "-" + (calendar.get(calendar.MONTH) + 1) + "-" + calendar.get(calendar.DAY_OF_MONTH));
    }

    /*
   void hora() {

        Timer timer = new Timer();
        
        Date HORA = new Date();
        String ampm="hh:mm:ss a";
        SimpleDateFormat format = new SimpleDateFormat(ampm);
        Calendar hoy= Calendar.getInstance();
        txtHora.setText(String.format(format.format(HORA),hoy));
        
        //LocalTime horactual = LocalTime.now();
        //txtHora.setText(""+horactual);
    }
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtTotalVenta = new javax.swing.JTextField();
        txtIvaVenta = new javax.swing.JTextField();
        btnGenerarVenta = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        txtCantidadProducto = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JButton();
        ingresomanual = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        pro_precio = new javax.swing.JTextField();
        pro_nombre = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaProductos = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        btnCancelarVenta = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        lblVentaDescuento = new javax.swing.JLabel();
        etiquetaReloj = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Punto de Venta");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Bicon.png"))); // NOI18N
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(250, 249, 249));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel1.setText("Hora");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 100, 50, 30));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Bytes50.png"))); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 30, 260, 70));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 610, 1360, 10));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Total:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 630, 50, 30));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Iva:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 630, -1, 30));

        txtTotalVenta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel1.add(txtTotalVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 630, 80, 30));

        txtIvaVenta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel1.add(txtIvaVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 630, 80, 30));

        btnGenerarVenta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnGenerarVenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/caja.png"))); // NOI18N
        btnGenerarVenta.setText("Generar Venta");
        btnGenerarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarVentaActionPerformed(evt);
            }
        });
        jPanel1.add(btnGenerarVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 630, 160, 40));

        jPanel2.setLayout(null);

        txtCantidadProducto.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtCantidadProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantidadProductoKeyTyped(evt);
            }
        });
        jPanel2.add(txtCantidadProducto);
        txtCantidadProducto.setBounds(20, 320, 180, 30);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Codigo");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(20, 80, 60, 30);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Cantidad");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(20, 280, 70, 30);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/carrito-de-compras.png"))); // NOI18N
        jLabel10.setText("Ingreso Productos");
        jPanel2.add(jLabel10);
        jLabel10.setBounds(20, 30, 160, 30);

        btnAgregar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/flecha-derecha.png"))); // NOI18N
        btnAgregar.setText("Agregar");
        btnAgregar.setFocusCycleRoot(true);
        btnAgregar.setFocusable(false);
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
        jPanel2.add(btnAgregar);
        btnAgregar.setBounds(30, 370, 120, 40);

        ingresomanual.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ingresomanualKeyPressed(evt);
            }
        });
        jPanel2.add(ingresomanual);
        ingresomanual.setBounds(20, 110, 180, 30);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Precio");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(20, 220, 60, 30);
        jPanel2.add(pro_precio);
        pro_precio.setBounds(20, 250, 180, 30);
        jPanel2.add(pro_nombre);
        pro_nombre.setBounds(20, 180, 180, 30);

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("Nombre");
        jPanel2.add(jLabel13);
        jLabel13.setBounds(20, 150, 60, 30);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/limpiar32.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);
        jButton1.setBounds(160, 370, 50, 40);

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 220, 430));

        jPanel3.setLayout(null);

        TablaProductos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        TablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nombre", "Precio Unitario", "Cantidad", "Total"
            }
        ));
        TablaProductos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TablaProductosKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(TablaProductos);

        jPanel3.add(jScrollPane1);
        jScrollPane1.setBounds(20, 20, 1050, 350);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/cancelar.png"))); // NOI18N
        jButton2.setText("Eliminar Producto");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2);
        jButton2.setBounds(900, 380, 170, 40);

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 160, 1090, 430));

        btnCancelarVenta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnCancelarVenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/cancelar.png"))); // NOI18N
        btnCancelarVenta.setText("Cancelar Venta");
        btnCancelarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarVentaActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancelarVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 630, 160, 40));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Bytes50.png"))); // NOI18N
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 260, 70));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel11.setText("Punto de Venta ");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 30, 210, 40));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel12.setText("Fecha");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 100, 50, 30));

        lblFecha.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jPanel1.add(lblFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 100, 90, 30));

        lblVentaDescuento.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel1.add(lblVentaDescuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 620, 80, 30));

        etiquetaReloj.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel1.add(etiquetaReloj, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 100, 140, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1360, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TablaProductosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TablaProductosKeyPressed

    }//GEN-LAST:event_TablaProductosKeyPressed

    private void btnGenerarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarVentaActionPerformed

        if (txtTotalVenta.getText().equals("")) {
            Icon icono = new ImageIcon(getClass().getResource("/iconosjoption/advertencia.png"));
            JOptionPane.showMessageDialog(null, "No hay datos para la venta", "Alerta",
                    JOptionPane.DEFAULT_OPTION, icono);
        } else {
            String dato =JOptionPane.showInputDialog("Ingrese Monto Entregado Por Cliente");

            
            System.out.println("monto");
            
            if (dato == null) {
                System.out.println("wena compa");
            System.out.println("**********************************************");
            guardarventa();
            guardardetalle();
            Icon icono = new ImageIcon(getClass().getResource("/iconosjoption/cajero-automatico.png"));
            JOptionPane.showMessageDialog(null, "Ventana Realizada con exito", "Confirmacion",
                    JOptionPane.DEFAULT_OPTION, icono);
            limpiartabla();
            limpiarcamposventa();
            ingresomanual.requestFocus();
        
            } else{
            int montocliente = Integer.parseInt(dato);
            int montoventa = Integer.parseInt(txtTotalVenta.getText());

            int calculovuelto = montocliente - montoventa;

            JOptionPane.showMessageDialog(null, "El vuelto es: \n " + "$" + calculovuelto, "Confirmacion",
                    JOptionPane.DEFAULT_OPTION, null);
            System.out.println("**********************************************");
            guardarventa();
            guardardetalle();
            Icon icono = new ImageIcon(getClass().getResource("/iconosjoption/cajero-automatico.png"));
            JOptionPane.showMessageDialog(null, "Ventana Realizada con exito", "Confirmacion",
                    JOptionPane.DEFAULT_OPTION, icono);
            limpiartabla();
            limpiarcamposventa();
            ingresomanual.requestFocus();
        }
        }
    }//GEN-LAST:event_btnGenerarVentaActionPerformed


    private void btnCancelarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarVentaActionPerformed
        limpiarcampos();
        limpiartabla();
        limpiarcamposventa();
        Icon icono = new ImageIcon(getClass().getResource("/iconosjoption/advertencia.png"));
        JOptionPane.showMessageDialog(null, "Venta cancelada", "Alerta", JOptionPane.CANCEL_OPTION, icono);
        System.out.println("" + codigobarra);
        ingresomanual.requestFocus();
    }//GEN-LAST:event_btnCancelarVentaActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed

        int val = Integer.parseInt(txtCantidadProducto.getText().toString());

        if (val == 0) {
            Icon icono = new ImageIcon(getClass().getResource("/iconosjoption/advertencia.png"));
            JOptionPane.showMessageDialog(null, "Cantidad No puede ser 0", "Alerta", JOptionPane.DEFAULT_OPTION, icono);
        } else {
            agregarproducto4();

            limpiarcampos();
            ingresomanual.requestFocus();
        }

        // agregarproducto3();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void ingresomanualKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ingresomanualKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            buscarpro(); //Método que tienes que crearte

        }

    }//GEN-LAST:event_ingresomanualKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        limpiarcampos();
        ingresomanual.requestFocus();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtCantidadProductoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadProductoKeyTyped
        char C = evt.getKeyChar();

        if (Character.isLetter(C)) {
            getToolkit().beep();
            evt.consume();
            Icon icono = new ImageIcon(getClass().getResource("/iconosjoption/advertencia.png"));
            JOptionPane.showMessageDialog(null, "No se admiten caracterez \n"
                    + "Solo se permiten numeros", "Alerta", JOptionPane.DEFAULT_OPTION, icono);
            txtCantidadProducto.setCursor(null);
        } else if ((int) evt.getKeyChar() > 32 && (int) evt.getKeyChar() <= 47
                || (int) evt.getKeyChar() >= 58 && (int) evt.getKeyChar() <= 64
                || (int) evt.getKeyChar() >= 91 && (int) evt.getKeyChar() <= 96
                || (int) evt.getKeyChar() >= 123 && (int) evt.getKeyChar() <= 255) {
            getToolkit().beep();
            evt.consume();
            Icon icono = new ImageIcon(getClass().getResource("/iconosjoption/advertencia.png"));
            JOptionPane.showMessageDialog(null, "No se admiten caracterez \n"
                    + "Solo se permiten numeros", "Alerta", JOptionPane.DEFAULT_OPTION, icono);
            txtCantidadProducto.setCursor(null);
        }
    }//GEN-LAST:event_txtCantidadProductoKeyTyped

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (TablaProductos.getSelectedRow()!= -1) {
            modelo.removeRow(TablaProductos.getSelectedRow());
        }else{
             Icon icono = new ImageIcon(getClass().getResource("/iconosjoption/seleccionar.png"));
            JOptionPane.showMessageDialog(null, "Debe seleccionar una fila",
                    "Alerta", JOptionPane.DEFAULT_OPTION, icono);
            
        }
        
//             int fila = TablaProductos.getSelectedRow();
//        if (fila == -1) {
//            Icon icono = new ImageIcon(getClass().getResource("/iconosjoption/seleccionar.png"));
//            JOptionPane.showMessageDialog(null, "Debe seleccionar una fila",
//                    "Alerta", JOptionPane.DEFAULT_OPTION, icono);
//        } else {
//            codigoaeliminar = TablaProductos.getValueAt(fila, 0).toString();
//            System.out.println(""+ codigoaeliminar);
//
//        }
    }//GEN-LAST:event_jButton2ActionPerformed

    
    void buscarpro() {
        if (ingresomanual.getText().equals("")) {
            Icon icono = new ImageIcon(getClass().getResource("/iconosjoption/advertencia.png"));
            JOptionPane.showMessageDialog(null, "Debe ingresar codigo producto", "Alerta", JOptionPane.DEFAULT_OPTION, icono);
        } else {
            String codpro = ingresomanual.getText();
            ep = ps.listarID(codpro);
            if (ep.getCodigo() != "") {
                pro_nombre.setText("" + ep.getNombre());
                pro_precio.setText("" + ep.getPrecio());
                txtCantidadProducto.requestFocus();
            } else {
                Icon icono = new ImageIcon(getClass().getResource("/iconosjoption/advertencia.png"));
                JOptionPane.showMessageDialog(null, "Producto inexistente", "Alerta", JOptionPane.DEFAULT_OPTION, icono);
            }

        }

    }

    void limpiarcampos() {
        txtCantidadProducto.setText("");
        lblVentaDescuento.setText("");
        ingresomanual.setText("");
        pro_nombre.setText("");
        pro_precio.setText("");

    }

    void limpiarcamposventa() {
        txtTotalVenta.setText("");
        txtIvaVenta.setText("");
    }

    void limpiartabla() {
        for (int i = 0; i < modelo.getRowCount(); i++) {
            modelo.removeRow(i);
            i = i - 1;
        }
    }

//    void buscarproducto() {
//        if (txtCodigoProducto.getText().equals("")) {
//            JOptionPane.showMessageDialog(null, "Debe ingresar codigo producto", "Alerta", JOptionPane.DEFAULT_OPTION, null);
//        } else {
//            String codigobarra = txtCodigoProducto.getText();
//            ep = ps.listarID(codigobarra);
//            if (ep.getCodigo() != " ") {
//                ep = ps.listarID(codigobarra);
//                System.out.println("" + ep.getNombre());
//            } else {
//                JOptionPane.showMessageDialog(null, "Producto inexistente", "Alerta", JOptionPane.DEFAULT_OPTION, null);
//            }
//        }
//    }
//    void agregarproducto() {
//
//        if (txtCodigoProducto.getText().equals("")) {
//            JOptionPane.showMessageDialog(null, "Ingrese codigo de producto", "Alerta", JOptionPane.DEFAULT_OPTION, null);
//        } else {
//
//            int total, descuento, iva, cantidadproducto;
//            modelo = (DefaultTableModel) TablaProductos.getModel();
//            //capturar nombre
//            ep = ps.listarID(codigobarra);
//            codigobarra = txtCodigoProducto.getText();
//            String nombre = ep.getNombre();
//            precio = ep.getPrecio();
//            //fin
//            can = 1;
//            //can = (Integer) Spinner_Cantidad.getValue();
//            total = can * ep.getPrecio();
//
//            //lista.clear();
//            //for (int i = 0; i < lista.size(); i++) {
//            //    lista.remove(i);
//            //}
//            if (codigobarra == "" || nombre == "" || precio == 0 || can == 0 || total == 0) {
//
//            } else {
//
//                lista.add(codigobarra);
//                lista.add(nombre);
//                lista.add(precio);
//                lista.add(can);
//                lista.add(0);
//                lista.add(total);
//                Object[] ob = new Object[6];
//                ob[0] = lista.get(0);
//                ob[1] = lista.get(1);
//                ob[2] = lista.get(2);
//                ob[3] = lista.get(3);
//                ob[4] = lista.get(4);
//                ob[5] = lista.get(5);
//                modelo.addRow(ob);
//                TablaProductos.setModel(modelo);
//                calculartotal();
//                lista.remove(ob);
//
//            }
//
//        }
//    }
//
//    void agregarproducto2() {
//
//        String sql = "select * from table_producto where codigo_producto_PK = " + txtCodigoProducto.getText() + "";
//        Connection conect = conexion.getconnection();
//        try {
//            Statement st = conect.createStatement();
//            ResultSet rs = st.executeQuery(sql);
//            while (rs.next()) {
//                codigobarra = rs.getString("codigo_producto_PK");
//                nombre = rs.getString("nombre");
//                precio = rs.getInt("precio");
//            }
//
//            if (txtCodigoProducto.getText().equals("")) {
//                JOptionPane.showMessageDialog(null, "Ingrese codigo de producto", "Alerta", JOptionPane.DEFAULT_OPTION, null);
//            } else {
//
//                int total, descuento, iva, cantidadproducto;
//                modelo = (DefaultTableModel) TablaProductos.getModel();
//                //capturar nombre
//                //ep = ps.listarID(codigobarra);
//                //codigobarra = txtCodigoProducto.getText();
//                //String nombre = ep.getNombre();
//                //precio = ep.getPrecio();
//                //fin
//
//                //can = (Integer) Spinner_Cantidad.getValue();
//                can = 1;
//                total = can * precio;
//
//                //lista.clear();
//                //for (int i = 0; i < lista.size(); i++) {
//                //    lista.remove(i);
//                //}
//                if (codigobarra != codigobarra || nombre == null || codigobarra == null) {
//                    JOptionPane.showMessageDialog(null, "Codigo no registrado", "Alerta", JOptionPane.DEFAULT_OPTION, null);
//                } else {
//
//                    lista.add(codigobarra);
//                    lista.add(nombre);
//                    lista.add(precio);
//                    lista.add(can);
//                    lista.add(0);
//                    lista.add(total);
//                    Object[] ob = new Object[6];
//                    ob[0] = lista.get(0);
//                    ob[1] = lista.get(1);
//                    ob[2] = lista.get(2);
//                    ob[3] = lista.get(3);
//                    ob[4] = lista.get(4);
//                    ob[5] = lista.get(5);
//
//                    boolean exist = false;
//                    for (int i = 0; i < modelo.getRowCount(); i++) {
//                        System.out.println("" + modelo.getValueAt(i, 0));
//                        String codigob = TablaProductos.getValueAt(i, 0).toString();
//
//                        if (codigobarra.equals(codigob)) {
//                            String cantidadpro = TablaProductos.getValueAt(i, 3).toString();
//                            System.out.println("*************************" + cantidadpro + "************************");
//                            System.out.println("******************************************************");
//                            int nuevocantidadpro = Integer.parseInt(cantidadpro);
//
//                            int sum = nuevocantidadpro + 1;
//                            Iterator it = lista.iterator();
//                            DefaultTableModel dm = (DefaultTableModel) TablaProductos.getModel();
//                            while (it.hasNext()) {
//                                System.out.println("MUESTRA DE DATOS LISTA : " + it.next());
////                                lista.set(3, sum);
////                                ob[3] = lista.set(3, sum);
//                                TablaProductos.setValueAt(sum, 0,
//                                        3);
//                                int calucototla = sum * precio;
//                                TablaProductos.setValueAt(calucototla, 0,
//                                        5);
//
////                                System.out.println("objeto 3: "+ ob[3]);
////                                TablaProductos.editCellAt(1, 3);
////                                TablaProductos.setModel(modelo);
////                                DefaultTableModel tableModel = (DefaultTableModel) TablaProductos.getModel();
////                                tableModel.setRowCount(0);
////                                dm.fireTableDataChanged();
////                                TablaProductos.repaint();
//                            }
////                            lista.add(codigobarra);
////                            lista.add(nombre);
////                            lista.add(precio);
////                            lista.get(sum);
//
////                            lista.add(0);
////                            lista.add(total);
////                            ob[0] = lista.get(0);
////                            ob[1] = lista.get(1);
////                            ob[2] = lista.get(2);
////                            ob[3] = lista.get(3);
////                            ob[4] = lista.get(4);
////                            ob[5] = lista.get(5);
//                            exist = true;
//                            modelo.fireTableDataChanged();
//                            System.out.println("la suma de producto existen mas el nmuevo es: " + sum);
//                            System.out.println("Codigo del producto: " + TablaProductos.getValueAt(i, 0));
//                            System.out.println("cantidad existente: " + TablaProductos.getValueAt(i, 3));
//                            System.out.println("--FIN--");
//                            lista.remove(ob);
//                            lista.clear();
//                            codigobarra = null;
//                            nombre = null;
//                            break;
//
////                            System.out.println("" + modelo.getValueAt(i, 3) + "lo nuevo" + can);
//                        }
//
//                    }
//
//                    if (!exist) {
//                        modelo.addRow(ob);
//                        TablaProductos.setModel(modelo);
//
//                        calculartotal();
//                        calculariva();
//
//                        lista.remove(ob);
//                        lista.clear();
//                        codigobarra = null;
//                        nombre = null;
//                        System.out.println("pasa por aca");
//                    }
//
//                    lista.remove(ob);
//                    lista.clear();
//                    codigobarra = null;
//                    nombre = null;
//
//                }
//            }
//        } catch (Exception e) {
//
//        }
//
//        lista.clear();
//        codigobarra = null;
//        nombre = null;
//        limpiarcampos();
//    }
//    void agregarproducto22() {
//
//        codigobarra = null;
//        lista.clear();
//        Object[] ob = new Object[6];
//        String sql = "select * from table_producto where codigo_producto_PK = " + txtCodigoProducto.getText() + "";
//        Connection conect = conexion.getconnection();
//        try {
//            Statement st = conect.createStatement();
//            ResultSet rs = st.executeQuery(sql);
//            while (rs.next()) {
//                codigobarra = rs.getString("codigo_producto_PK");
//                nombre = rs.getString("nombre");
//                precio = rs.getInt("precio");
//            }
////            if (txtCodigoProducto.getText().equals("")) {
////                JOptionPane.showMessageDialog(null, "Ingrese codigo de producto", "Alerta", JOptionPane.DEFAULT_OPTION, null);
////            } else {
//            int total, descuento, iva, cantidadproducto;
//            modelo = (DefaultTableModel) TablaProductos.getModel();
//
//            can = 1;
//            total = can * precio;
////                if (codigobarra != codigobarra || nombre == null || codigobarra == null) {
////                    JOptionPane.showMessageDialog(null, "Codigo no registrado", "Alerta", JOptionPane.DEFAULT_OPTION, null);
////                } else {
//            lista.add(codigobarra);
//            lista.add(nombre);
//            lista.add(precio);
//            lista.add(can);
//            lista.add(0);
//            lista.add(total);
//
//            ob[0] = lista.get(0);
//            ob[1] = lista.get(1);
//            ob[2] = lista.get(2);
//            ob[3] = lista.get(3);
//            ob[4] = lista.get(4);
//            ob[5] = lista.get(5);
//            boolean exist = false;
//            for (int i = 0; i < modelo.getRowCount(); i++) {
//                System.out.println("" + modelo.getValueAt(i, 0));
//                String codigob = TablaProductos.getValueAt(i, 0).toString();
//                if (codigobarra.equals(codigob)) {
//                    String cantidadpro = TablaProductos.getValueAt(i, 3).toString();
//                    System.out.println("*************************" + cantidadpro + "************************");
//                    System.out.println("******************************************************");
//                    int nuevocantidadpro = Integer.parseInt(cantidadpro);
//                    int sum = nuevocantidadpro + 1;
//                    Iterator it = lista.iterator();
//                    DefaultTableModel dm = (DefaultTableModel) TablaProductos.getModel();
//                    while (it.hasNext()) {
//                        System.out.println("MUESTRA DE DATOS LISTA : " + it.next());
////                                lista.set(3, sum);
////                                ob[3] = lista.set(3, sum);
//                        if (codigobarra.equals(TablaProductos.getValueAt(i, 0))) {
//                            TablaProductos.setValueAt(sum, 1,
//                                    3);
//                        }
//
//                        int calucototla = sum * precio;
//                        TablaProductos.setValueAt(calucototla, 0, 5);
//                        txtDescuentoVenta.setText("" + calucototla);
//                    }
//                    exist = true;
//                    modelo.fireTableDataChanged();
//                    System.out.println("la suma de producto existen mas el nmuevo es: " + sum);
//                    System.out.println("Codigo del producto: " + TablaProductos.getValueAt(i, 0));
//                    System.out.println("cantidad existente: " + TablaProductos.getValueAt(i, 3));
//                    System.out.println("--FIN--");
//                    lista.remove(ob);
//                    lista.clear();
//                    codigobarra = null;
//                    nombre = null;
//                    break;
//                }
//            }
//            if (!exist) {
//                modelo.addRow(ob);
//                TablaProductos.setModel(modelo);
//                calculartotal();
//                calculariva();
//                lista.remove(ob);
//                lista.clear();
//                codigobarra = null;
//                nombre = null;
//                System.out.println("pasa por aca");
//            }
//            lista.remove(ob);
//            lista.clear();
//            codigobarra = null;
//            nombre = null;
////                }
////            }
//            st.cancel();
//        } catch (Exception e) {
//        }
//        lista.clear();
//        lista.remove(ob);
//        codigobarra = null;
//        nombre = null;
//        limpiarcampos();
//
//    }
    void agregarproducto3() {

        for (int i = 0; i < modelo.getRowCount(); i++) {
            System.out.println("" + modelo.getValueAt(i, 0));

        }

    }

    void agregarproducto4() {

        String sql = "select * from table_producto where codigo_producto_PK = " + ingresomanual.getText() + "";
        Connection conect = conexion.getconnection();
        try {
            Statement st = conect.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                codigobarra = rs.getString("codigo_producto_PK");
                nombre = rs.getString("nombre");
                precio = rs.getInt("precio");
            }

            if (ingresomanual.getText().equals("")) {
                Icon icono = new ImageIcon(getClass().getResource("/iconosjoption/advertencia.png"));
                JOptionPane.showMessageDialog(null, "Ingrese codigo de producto", "Alerta", JOptionPane.DEFAULT_OPTION, icono);
            } else {

                int total, descuento, iva, cantidadproducto;
                modelo = (DefaultTableModel) TablaProductos.getModel();
                //capturar nombre
                //ep = ps.listarID(codigobarra);
                //codigobarra = txtCodigoProducto.getText();
                //String nombre = ep.getNombre();
                //precio = ep.getPrecio();
                //fin

                //can = (Integer) Spinner_Cantidad.getValue();
                String cantidad = txtCantidadProducto.getText();
                int cant = Integer.parseInt(cantidad);
                total = cant * precio;

                //lista.clear();
                //for (int i = 0; i < lista.size(); i++) {
                //    lista.remove(i);
                //}
                if (codigobarra != codigobarra || nombre == null || codigobarra == null) {
                    Icon icono = new ImageIcon(getClass().getResource("/iconosjoption/advertencia.png"));
                    JOptionPane.showMessageDialog(null, "Codigo no registrado", "Alerta", JOptionPane.DEFAULT_OPTION, icono);
                } else {

                    lista.add(codigobarra);
                    lista.add(nombre);
                    lista.add(precio);
                    lista.add(cant);
                    lista.add(total);
                    Object[] ob = new Object[6];
                    ob[0] = lista.get(0);
                    ob[1] = lista.get(1);
                    ob[2] = lista.get(2);
                    ob[3] = lista.get(3);
                    ob[4] = lista.get(4);
                    modelo.addRow(ob);
                    TablaProductos.setModel(modelo);

                    calculartotal();
                    calculariva();
                    lista.remove(ob);
                    lista.clear();
                    codigobarra = null;
                    nombre = null;
                }
            }
        } catch (Exception e) {

        }
        limpiarcampos();

    }

    void guardarventa() {
        String fecha = lblFecha.getText();

        int montototal = Integer.parseInt(txtTotalVenta.getText().toString());
        int valor_iva_venta = Integer.parseInt(txtIvaVenta.getText().toString());

        ev.setFecha_venta(fecha);
        ev.setValor_iva(valor_iva_venta);
        ev.setMonto_venta(montototal);

        ventasql.Guardar_Venta(ev);
    }

    void guardardetalle() {
        for (int i = 0; i < TablaProductos.getRowCount(); i++) {
            String codigodeproducto = TablaProductos.getValueAt(i, 0).toString();
            int cantidaddeproducto = Integer.parseInt(TablaProductos.getValueAt(i, 3).toString());

            edv.setFk_produc_codigo(codigodeproducto);
            edv.setCantidad_producto(cantidaddeproducto);
            ventasql.GuardarDetalleVenta(edv);

        }
    }

    void calculartotal() {
        int totalpago = 0;
        for (int i = 0; i < TablaProductos.getRowCount(); i++) {
            can = Integer.parseInt(TablaProductos.getValueAt(i, 3).toString());
            precio = Integer.parseInt(TablaProductos.getValueAt(i, 2).toString());
            totalpago = totalpago + (can * precio);
//            System.out.println("" + totalpago);

        }
        txtTotalVenta.setText("" + totalpago);
    }

    void calculariva() {
        int totaliva = 0;

        String total = txtTotalVenta.getText();
        int tota = Integer.parseInt(total);

        tota = (int) (tota * 0.19);

        total = Integer.toString(tota);

        txtIvaVenta.setText("" + total);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaProductos;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCancelarVenta;
    private javax.swing.JButton btnGenerarVenta;
    private javax.swing.JLabel etiquetaReloj;
    private javax.swing.JTextField ingresomanual;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblVentaDescuento;
    private javax.swing.JTextField pro_nombre;
    private javax.swing.JTextField pro_precio;
    private javax.swing.JTextField txtCantidadProducto;
    private javax.swing.JTextField txtIvaVenta;
    private javax.swing.JTextField txtTotalVenta;
    // End of variables declaration//GEN-END:variables
}
